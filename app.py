import streamlit as st
import pandas as pd
import numpy as np
import math
import altair as alt
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from matplotlib.patches import Patch
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score



st.title('Projet :clapper: :red[CineStat] :clapper:')
st.text("Lise AYMONIN\nAndreas JULIEN-CARAGUEL\n")
st.header("Probl√©matique", divider="gray")
st.link_button("Source de la donn√©e", "https://www.data.gouv.fr/datasets/frequentation-des-salles-de-cinema/")
st.text("A quoi ressemblera la courbe des entr√©es pour les mois, ann√©es √† venir ?\nQuelles sont les semaines et les mois de plus forte affluence dans l‚Äôann√©e ?")


fichier = 'Mise_en_forme_Frequentation_Salles_Cine.xlsx'
data = pd.read_excel(fichier, sheet_name ='Entrees_mois')


st.header("Tableau de donn√©es (brut)", divider=True)
data.insert(0, 'ID', range(1, 1 + len(data)))
df = pd.DataFrame(data)
df



# --- Titre ---
st.header("üé¨ Pr√©vision du nombre d‚Äôentr√©es cin√©ma", divider=True)

# --- Chargement du fichier Excel ---
fichier = 'Mise_en_forme_Frequentation_Salles_Cine.xlsx'
data = pd.read_excel(fichier, sheet_name='Entrees_mois')

# --- Restructuration du jeu de donn√©es ---
df_long = data.melt(
    id_vars=["Ann√©es"],
    value_vars=data.columns[2:13],
    var_name="mois", value_name="entrees"
)

# --- Mois en chiffres ---
mois_map = {
    "janvier": 1, "f√©vrier": 2, "mars": 3, "avril": 4, "mai": 5, "juin": 6,
    "juillet": 7, "ao√ªt": 8, "septembre": 9, "octobre": 10, "novembre": 11, "d√©cembre": 12
}
df_long["num√©ro mois"] = df_long["mois"].map(mois_map)

# --- Date compl√®te ---
df_long["date"] = pd.to_datetime(dict(year=df_long["Ann√©es"], month=df_long["num√©ro mois"], day=1))
df_long = df_long.sort_values("date").reset_index(drop=True)
df_long["trimestre"] = df_long["date"].dt.quarter
df_long["vacances"] = df_long["num√©ro mois"].isin([7, 8, 12]).astype(int)

# --- Tableau restructur√© pour mod√©lisation ---
st.header("Tableau des donn√©es restructur√©es")
df_long.insert(0, 'ID', range(1, 1 + len(df_long)))
st.dataframe(df_long)

# --- Cr√©ation de features de d√©calage ---
s1, s2, m = 3, 6, 12
df_long["lag1"] = df_long["entrees"].shift(s1)
df_long["lag2"] = df_long["entrees"].shift(s2)
df_long["mean3"] = df_long["entrees"].rolling(m).mean()
# --- Suppression des NaN cr√©√©s par les d√©calages ---
df_long = df_long.dropna().reset_index(drop=True)

# --- Variables explicatives et cible ---
col = ['Ann√©es', 'num√©ro mois', 'vacances', 'lag1', 'lag2', 'mean3', 'trimestre']
x = df_long[col]
y = df_long["entrees"]

# --- S√©paration train/test ---
splitDate = st.input(
    "Entrer une date √† partir de laquelle v√©rifier le mod√®le :",
    value = "2017,01,01"
)
splitDate = pd.to_datetime(splitDate)
xtrain = x[df_long["date"] < splitDate]
ytrain = y[df_long["date"] < splitDate]
xtest = x[df_long["date"] >= splitDate]
ytest = y[df_long["date"] >= splitDate]
datesTest = df_long.loc[df_long["date"] >= splitDate, "date"]

# --- Entra√Ænement du mod√®le Random Forest ---
model = RandomForestRegressor(random_state=42, n_estimators=300)
model.fit(xtrain, ytrain)
ypred = model.predict(xtest)

# --- √âvaluation du mod√®le ---
mae = mean_absolute_error(ytest, ypred)
# --- Affichage des m√©triques ---
st.subheader("üìä √âvaluation du mod√®le Random Forest")
st.write(f"**MAE :** {mae:,.0f} entr√©es")
if mae > 2000000: st.write("Erreur sup√©rieure √† 2 millions d'entr√©es : erreur √©lev√©e !!")
else: st.write("Erreur inf√©rieur √† 2 millions d'entr√©es : c'est acceptable.")

# --- Graphique matplotlib ---
fig, ax = plt.subplots(figsize=(10, 5))
ax.plot(datesTest, ytest, label="Valeurs r√©elles", color="blue", marker='o')
ax.plot(datesTest, ypred, label="Pr√©dictions", color="orange", marker='x', linewidth=2)
ax.set_title(f"Pr√©diction de la fr√©quentation des cin√©mas depuis {splitDate[0:4]}")
ax.set_xlabel("Ann√©e")
ax.set_ylabel("Nombre d'entr√©es en millions")
ax.legend()
ax.grid(True, linestyle="--", alpha=0.5)
plt.tight_layout()

# --- Affichage dans Streamlit ---
st.pyplot(fig)

# --- Commentaire ---
st.write(
    "Ce graphique compare les pr√©visions et les valeurs r√©elles du le nombre d‚Äôentr√©es"
    "dans les salles de cin√©ma fran√ßaises, bas√© sur un mod√®le de **Random Forest**. "
    "On va voir que les pics r√©curent correspondent aux p√©riodes estivales et de f√™tes de fin d‚Äôann√©e."
)





# --- Titre ---
st.header("üé¨ Projection du nombre d‚Äôentr√©es cin√©ma √† l'avenir", divider=True)

# --- Mod√®le Random Forest ---
col = ['Ann√©es', 'num√©ro mois', 'vacances', 'lag1', 'lag2', 'mean3', 'trimestre']
x = df_long[col]
y = df_long["entrees"]

model = RandomForestRegressor(random_state=42, n_estimators=300)
model.fit(x, y)

# --- Cr√©ation du futur (2025 ‚Üí 2030) ---
endDate = "2030-12-01"
futur = pd.date_range(start=df_long["date"].max() + pd.offsets.MonthBegin(1), end=endDate, freq="MS")
dfutur = pd.DataFrame({"date": futur})
dfutur["Ann√©es"] = dfutur["date"].dt.year
dfutur["num√©ro mois"] = dfutur["date"].dt.month
dfutur["trimestre"] = dfutur["date"].dt.quarter
dfutur["vacances"] = dfutur["num√©ro mois"].isin([7, 8, 12]).astype(int)

# --- Concat√©nation ---
dfull = pd.concat([df_long, dfutur], ignore_index=True)

# --- G√©n√©ration des pr√©dictions futures ---
for i in range(len(df_long), len(dfull)):
    dfull.loc[i, "lag1"] = dfull.loc[i - s1, "entrees"]
    dfull.loc[i, "lag2"] = dfull.loc[i - s2, "entrees"]
    dfull.loc[i, "mean3"] = dfull.loc[i - m:i - 1, "entrees"].mean()
    xfut = dfull.loc[i, col].to_frame().T
    dfull.loc[i, "entrees"] = model.predict(xfut)[0]

# --- Extraction des pr√©visions futures ---
fut_pred = dfull.loc[len(df_long):, ["date", "entrees"]]

# --- Graphique ---
fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(df_long["date"], df_long["entrees"], label="Valeurs r√©elles", color="blue")
ax.plot(fut_pred["date"], fut_pred["entrees"], label=f"Pr√©visions futures (2025‚Äì{endDate[0:4]})", color="green", linewidth=2)
ax.set_title(f"Pr√©vision du nombre d‚Äôentr√©es cin√©ma jusqu‚Äôen {futur[-1].year}")
ax.set_xlabel("Date")
ax.set_ylabel("Nombre d‚Äôentr√©es (en millions)")
ax.legend()
ax.grid(True)
plt.tight_layout()

# --- Affichage du graphique ---
st.pyplot(fig)

# --- Texte d‚Äôanalyse ---
st.subheader("üìà Interpr√©tation")
st.write(
    f"Le mod√®le Random Forest pr√©dit l‚Äô√©volution du nombre d‚Äôentr√©es cin√©ma jusqu‚Äôen **{futur[-1].year}**. "
    "Les valeurs r√©elles (en bleu) et les projections (en vert) permettent d‚Äôanticiper les tendances "
    "saisonni√®res et les p√©riodes de forte affluence. Cependant les crises majeures impactant le milieu ne sont pas prises en compte (covid, √©volutions technologiques, etc)."
)




# --- Titre ---
st.header("üé¨ Analyse KNN ‚Äî Classification des mois selon leur affluence moyenne", divider=True)

# --- Lecture du fichier Excel ---
fichier = "Mise_en_forme_Frequentation_Salles_Cine.xlsx"
df = pd.read_excel(fichier, sheet_name="Entrees_mois")

# --- Liste des mois ---
mois = [
    "janvier", "f√©vrier", "mars", "avril", "mai", "juin",
    "juillet", "ao√ªt", "septembre", "octobre", "novembre", "d√©cembre"
]

# --- Calcul des moyennes mensuelles ---
moyennes_mois = df[mois].mean()

# --- Calcul des quantiles ---
q1 = moyennes_mois.quantile(0.33)
q2 = moyennes_mois.quantile(0.66)

# --- Attribution des cat√©gories ---
labels = []
for val in moyennes_mois:
    if val <= q1:
        labels.append("faible affluence")
    elif val <= q2:
        labels.append("moyenne affluence")
    else:
        labels.append("forte affluence")

# --- Pr√©paration des donn√©es ---
X = moyennes_mois.values.reshape(-1, 1)
y = labels

# --- Mod√®le KNN ---
classifier = KNeighborsClassifier(n_neighbors=1)
classifier.fit(X, y)
y_pred = classifier.predict(X)

# --- √âvaluation du mod√®le ---
conf_matrix = confusion_matrix(y, y_pred)
class_report = classification_report(y, y_pred, output_dict=True)
accuracy = accuracy_score(y, y_pred)

# --- Affichage des m√©triques ---
st.subheader("üìä √âvaluation du mod√®le KNN")
st.write(f"**Exactitude du mod√®le :** {accuracy:.2f}")
st.write("**Matrice de confusion :**")
st.dataframe(pd.DataFrame(conf_matrix, index=sorted(set(y)), columns=sorted(set(y))))
st.write("**Rapport de classification :**")
st.dataframe(pd.DataFrame(class_report).transpose())

# --- Couleurs selon cat√©gorie ---
palette = {"faible affluence": "lightblue", "moyenne affluence": "orange", "forte affluence": "red"}

# --- Graphique ---
fig, ax = plt.subplots(figsize=(12, 5))
sns.barplot(x=moyennes_mois.index, y=moyennes_mois.values, palette=[palette[c] for c in y_pred], ax=ax)
ax.set_title("Classification des mois selon leur affluence moyenne (KNN)")
ax.set_ylabel("Entr√©es moyennes")
ax.set_xlabel("Mois")
plt.xticks(rotation=45)

# --- L√©gende dynamique ---
legend_elements = [
    Patch(facecolor="lightblue", label=f"Faible affluence ‚â§ {int(q1):,} entr√©es"),
    Patch(facecolor="orange", label=f"Moyenne affluence {int(q1)+1:,} ‚Äì {int(q2):,} entr√©es"),
    Patch(facecolor="red", label=f"Forte affluence > {int(q2):,} entr√©es"),
]
ax.legend(handles=legend_elements, title="Cat√©gorie d'affluence")

st.pyplot(fig)

# --- Interpr√©tation ---
st.subheader("üß© Interpr√©tation")
st.write(
    "Cette classification utilise un algorithme **K-Nearest Neighbors (KNN)** "
    "pour identifier les mois de **forte**, **moyenne** ou **faible affluence** "
    "en fonction du nombre moyen d‚Äôentr√©es au cin√©ma."
)
st.info(
    "üëâ En rouge : forte affluence (√©t√© et f√™tes), "
    "en orange : moyenne affluence, "
    "en bleu : faible affluence."
)

st.header("Surprises", divider=True)
st.link_button("Clique pour une surprise", "https://www.youtube.com/watch?v=xvFZjo5PgG0")
st.link_button("Clique pour une surprise v2", "https://chat-jai-pete.fr/")
