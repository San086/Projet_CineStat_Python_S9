import streamlit as st
import pandas as pd
import numpy as np
import math
import altair as alt
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error


st.title('Projet :clapper: :red[CineStat] :clapper:')
st.text("Lise AYMONIN\nAndreas JULIEN-CARAGUEL\n")
st.header("Probl√©matique", divider="gray")
st.link_button("Source de la donn√©e", "https://www.data.gouv.fr/datasets/frequentation-des-salles-de-cinema/")
st.text("A quoi ressemblera la courbe des entr√©es pour les mois, ann√©es √† venir ?\nQuelles sont les semaines et les mois de plus forte affluence dans l‚Äôann√©e ?")


fichier = 'Mise_en_forme_Frequentation_Salles_Cine.xlsx'
data = pd.read_excel(fichier, sheet_name ='Entrees_mois')


st.header("Tableau de donn√©es (brut)", divider=True)
data.insert(0, 'ID', range(1, 1 + len(data)))
df = pd.DataFrame(data)
df



# --- Titre ---
st.title("üé¨ Projet CineStat ‚Äî Pr√©vision du nombre d‚Äôentr√©es cin√©ma")

# --- Chargement du fichier Excel ---
fichier = 'Mise_en_forme_Frequentation_Salles_Cine.xlsx'
data = pd.read_excel(fichier, sheet_name='Entrees_mois')

# --- Restructuration du jeu de donn√©es ---
df_long = data.melt(
    id_vars=["Ann√©es"],
    value_vars=data.columns[2:13],
    var_name="mois", value_name="entrees"
)

# --- Mois en chiffres ---
mois_map = {
    "janvier": 1, "f√©vrier": 2, "mars": 3, "avril": 4, "mai": 5, "juin": 6,
    "juillet": 7, "ao√ªt": 8, "septembre": 9, "octobre": 10, "novembre": 11, "d√©cembre": 12
}
df_long["num√©ro mois"] = df_long["mois"].map(mois_map)

# --- Date compl√®te ---
df_long["date"] = pd.to_datetime(dict(year=df_long["Ann√©es"], month=df_long["num√©ro mois"], day=1))
df_long = df_long.sort_values("date").reset_index(drop=True)
df_long["trimestre"] = df_long["date"].dt.quarter
df_long["vacances"] = df_long["num√©ro mois"].isin([7, 8, 12]).astype(int)

# --- Cr√©ation de features de d√©calage ---
s1, s2, m = 3, 6, 12
df_long["lag1"] = df_long["entrees"].shift(s1)
df_long["lag2"] = df_long["entrees"].shift(s2)
df_long["mean3"] = df_long["entrees"].rolling(m).mean()

# --- Suppression des NaN cr√©√©s par les d√©calages ---
df_long = df_long.dropna().reset_index(drop=True)

# --- Variables explicatives et cible ---
col = ['Ann√©es', 'num√©ro mois', 'vacances', 'lag1', 'lag2', 'mean3', 'trimestre']
x = df_long[col]
y = df_long["entrees"]

# --- S√©paration train/test ---
splitDate = "2017-01-01"
xtrain = x[df_long["date"] < splitDate]
ytrain = y[df_long["date"] < splitDate]
xtest = x[df_long["date"] >= splitDate]
ytest = y[df_long["date"] >= splitDate]
datesTest = df_long.loc[df_long["date"] >= splitDate, "date"]

# --- Entra√Ænement du mod√®le Random Forest ---
model = RandomForestRegressor(random_state=42, n_estimators=300)
model.fit(xtrain, ytrain)
ypred = model.predict(xtest)

# --- √âvaluation du mod√®le ---
mae = mean_absolute_error(ytest, ypred)
mape = np.mean(np.abs((ytest - ypred) / (ytest + 0.1))) * 100

# --- Affichage des m√©triques ---
st.subheader("üìä √âvaluation du mod√®le Random Forest")
st.write(f"**MAE :** {mae:,.0f} entr√©es")
st.write(f"**Erreur moyenne (MAPE) :** {mape:.2f}%")

# --- Graphique matplotlib ---
fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(df_long["date"], df_long["entrees"], label="Valeurs r√©elles", color="blue")
ax.plot(datesTest, ypred, label="Pr√©dictions", color="orange", linewidth=2)
ax.set_title("Pr√©vision du nombre d‚Äôentr√©es cin√©ma (mod√®le Random Forest)")
ax.set_xlabel("Ann√©e")
ax.set_ylabel("Nombre d'entr√©es en millions")
ax.legend()
ax.grid(True)
plt.tight_layout()

# --- Affichage dans Streamlit ---
st.pyplot(fig)

# --- Commentaire ---
st.write(
    "Ce graphique illustre les valeurs observ√©es et les pr√©visions du nombre d‚Äôentr√©es "
    "dans les salles de cin√©ma fran√ßaises, bas√©es sur un mod√®le de **Random Forest**. "
    "Les pics observ√©s correspondent aux p√©riodes estivales et de f√™tes de fin d‚Äôann√©e."
)





# --- Titre ---
st.title("üé¨ CineStat ‚Äî Projection du nombre d‚Äôentr√©es cin√©ma jusqu‚Äôen 2030")

# --- Chargement du fichier Excel ---
fichier = 'Mise_en_forme_Frequentation_Salles_Cine.xlsx'
data = pd.read_excel(fichier, sheet_name='Entrees_mois')

# --- Restructuration du jeu de donn√©es ---
df_long = data.melt(
    id_vars=["Ann√©es"],
    value_vars=data.columns[2:13],
    var_name="mois", value_name="entrees"
)

# --- Mois en chiffres ---
mois_map = {
    "janvier": 1, "f√©vrier": 2, "mars": 3, "avril": 4, "mai": 5, "juin": 6,
    "juillet": 7, "ao√ªt": 8, "septembre": 9, "octobre": 10, "novembre": 11, "d√©cembre": 12
}
df_long["num√©ro mois"] = df_long["mois"].map(mois_map)

# --- Cr√©ation de la colonne date ---
df_long["date"] = pd.to_datetime(dict(year=df_long["Ann√©es"], month=df_long["num√©ro mois"], day=1))
df_long = df_long.sort_values("date").reset_index(drop=True)
df_long["trimestre"] = df_long["date"].dt.quarter
df_long["vacances"] = df_long["num√©ro mois"].isin([7, 8, 12]).astype(int)

# --- D√©finition des lags ---
s1, s2, m = 3, 6, 12
df_long["lag1"] = df_long["entrees"].shift(s1)
df_long["lag2"] = df_long["entrees"].shift(s2)
df_long["mean3"] = df_long["entrees"].rolling(m).mean()
df_long = df_long.dropna().reset_index(drop=True)

# --- Mod√®le Random Forest ---
col = ['Ann√©es', 'num√©ro mois', 'vacances', 'lag1', 'lag2', 'mean3', 'trimestre']
x = df_long[col]
y = df_long["entrees"]

model = RandomForestRegressor(random_state=42, n_estimators=300)
model.fit(x, y)

# --- Cr√©ation du futur (2025 ‚Üí 2030) ---
futur = pd.date_range(start=df_long["date"].max() + pd.offsets.MonthBegin(1), end="2030-12-01", freq="MS")
dfutur = pd.DataFrame({"date": futur})
dfutur["Ann√©es"] = dfutur["date"].dt.year
dfutur["num√©ro mois"] = dfutur["date"].dt.month
dfutur["trimestre"] = dfutur["date"].dt.quarter
dfutur["vacances"] = dfutur["num√©ro mois"].isin([7, 8, 12]).astype(int)

# --- Concat√©nation ---
dfull = pd.concat([df_long, dfutur], ignore_index=True)

# --- G√©n√©ration des pr√©dictions futures ---
for i in range(len(df_long), len(dfull)):
    dfull.loc[i, "lag1"] = dfull.loc[i - s1, "entrees"]
    dfull.loc[i, "lag2"] = dfull.loc[i - s2, "entrees"]
    dfull.loc[i, "mean3"] = dfull.loc[i - m:i - 1, "entrees"].mean()
    xfut = dfull.loc[i, col].to_frame().T
    dfull.loc[i, "entrees"] = model.predict(xfut)[0]

# --- Extraction des pr√©visions futures ---
fut_pred = dfull.loc[len(df_long):, ["date", "entrees"]]

# --- Graphique ---
fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(df_long["date"], df_long["entrees"], label="Valeurs r√©elles", color="blue")
ax.plot(fut_pred["date"], fut_pred["entrees"], label="Pr√©visions futures (2025‚Äì2030)", color="green", linewidth=2)
ax.set_title(f"Pr√©vision du nombre d‚Äôentr√©es cin√©ma jusqu‚Äôen {futur[-1].year}")
ax.set_xlabel("Date")
ax.set_ylabel("Nombre d‚Äôentr√©es (en millions)")
ax.legend()
ax.grid(True)
plt.tight_layout()

# --- Affichage du graphique ---
st.pyplot(fig)

# --- Texte d‚Äôanalyse ---
st.subheader("üìà Interpr√©tation")
st.write(
    f"Le mod√®le Random Forest pr√©dit l‚Äô√©volution du nombre d‚Äôentr√©es cin√©ma jusqu‚Äô√† **{futur[-1].year}**. "
    "Les valeurs r√©elles (en bleu) et les projections (en vert) permettent d‚Äôanticiper les tendances "
    "saisonni√®res et les p√©riodes de forte affluence."
)
